(()=>{"use strict";var t={950:(t,e,i)=>{i.d(e,{Z:()=>s});var n=i(15),o=i.n(n),r=i(645),a=i.n(r)()(o());a.push([t.id,'.eightbit{background:var(--background-color);box-shadow:inset calc(-1 *var(--shadow-width)) calc(-1* var(--shadow-width)) 0px 0px var(--shadow-color)}.eightbit::after,.eightbit::before{content:"";position:absolute;width:100%;height:100%;box-sizing:content-box}.eightbit::before{top:calc(-1 * var(--outline-width));left:0;border-top:var(--outline-width) var(--text-color) solid;border-bottom:var(--outline-width) var(--text-color) solid}.eightbit::after{left:calc(-1 * var(--outline-width));top:0;border-left:var(--outline-width) var(--text-color) solid;border-right:var(--outline-width) var(--text-color) solid}.eightbit__btn{display:inline-block;position:relative;text-align:center;font-family:var(--font-family);font-size:1.2rem;color:inherit;padding:1rem;margin:1rem auto;cursor:pointer;z-index:inherit}.eightbit__btn:hover{background:var(--sec-button-background);box-shadow:inset calc(-1,5 var(--shadow-width)) calc(var(--shadow-width)* -1.5) 0px 0px var(--shadow-color)}.eightbit__btn:active{box-shadow:inset var(--shadow-width) var(--shadow-width) 0px 0px var(--shadow-color)}:root{--outline-width: 6px;--shadow-width: 4px;--shadow-color: rgb(216, 216, 216);--font-family: "Press Start 2P", cursive;--text-color: rgb(231, 231, 231);--background-color: rgb(124, 131, 128)}html,body{width:100%;height:100%;margin:0;font-family:var(--font-family);color:var(--text-color)}body{display:flex;flex-direction:column;align-items:center;background-color:var(--background-color)}canvas{margin:auto;margin-top:1em}.score{width:80%;display:flex;justify-content:space-around}.score__container{text-align:center}.score__display{font-size:1.6em;margin:.5em 0}.info{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);padding:3rem;text-align:center}.info.inactive{display:none;pointer-events:none}#start-button{z-index:100}',"",{version:3,sources:["webpack://./_eightbit.scss","webpack://./app.scss"],names:[],mappings:"AACA,UACI,kCAAA,CACA,wGAAA,CAEA,mCAEI,UAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,sBAAA,CAGJ,kBACI,mCAAA,CACA,MAAA,CACA,uDAAA,CACA,0DAAA,CAGJ,iBACI,oCAAA,CACA,KAAA,CACA,wDAAA,CACA,yDAAA,CAGJ,eACI,oBAAA,CACA,iBAAA,CAEA,iBAAA,CACA,8BAAA,CACA,gBAAA,CACA,aAAA,CAEA,YAAA,CACA,gBAAA,CAEA,cAAA,CAEA,eAAA,CAEA,qBACI,uCAAA,CACA,2GAAA,CAGJ,sBACI,oFAAA,CChDZ,MACE,oBAAA,CACA,mBAAA,CAEA,kCAAA,CACA,wCAAA,CAEA,gCAAA,CACA,sCAAA,CAGF,UACE,UAAA,CACA,WAAA,CACA,QAAA,CACA,8BAAA,CACA,uBAAA,CAGF,KACE,YAAA,CACA,qBAAA,CACA,kBAAA,CAEA,wCAAA,CAGF,OACE,WAAA,CACA,cAAA,CAGF,OACE,SAAA,CAEA,YAAA,CACA,4BAAA,CAEA,kBACE,iBAAA,CAGF,gBACE,eAAA,CACA,aAAA,CAIJ,MACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,+BAAA,CACA,YAAA,CACA,iBAAA,CAEA,eACE,YAAA,CACA,mBAAA,CAIJ,cACE,WAAA",sourcesContent:["\n.eightbit {\n    background: var(--background-color);\n    box-shadow: inset calc(-1 *var(--shadow-width)) calc(-1* var(--shadow-width)) 0px 0px var(--shadow-color);\n\n    &::after,\n    &::before {\n        content: '';\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        box-sizing: content-box;\n    }\n\n    &::before {\n        top: calc(-1 * var(--outline-width));\n        left: 0;\n        border-top: var(--outline-width) var(--text-color) solid;\n        border-bottom: var(--outline-width) var(--text-color) solid;\n    }\n\n    &::after {\n        left: calc(-1 * var(--outline-width));;\n        top: 0;\n        border-left: var(--outline-width) var(--text-color) solid;\n        border-right: var(--outline-width) var(--text-color) solid;\n    }\n\n    &__btn {\n        display: inline-block;\n        position: relative;\n\n        text-align: center;\n        font-family: var(--font-family);\n        font-size: 1.2rem;\n        color: inherit;\n\n        padding: 1rem;\n        margin: 1rem auto;\n\n        cursor: pointer; \n\n        z-index: inherit;\n\n        &:hover {\n            background: var(--sec-button-background);\n            box-shadow: inset calc(-1,5 var(--shadow-width)) calc(var(--shadow-width)* -1.5) 0px 0px var(--shadow-color);\n        }\n\n        &:active {\n            box-shadow: inset var(--shadow-width) var(--shadow-width) 0px 0px var(--shadow-color);\n        }\n    }\n}","@import 'eightbit';\n\n:root {\n  --outline-width: 6px;\n  --shadow-width: 4px;\n  \n  --shadow-color: rgb(216, 216, 216);\n  --font-family: 'Press Start 2P', cursive;\n\n  --text-color: rgb(231, 231, 231);\n  --background-color:  rgb(124, 131, 128);\n}\n\nhtml, body {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  font-family: var(--font-family);\n  color: var(--text-color);\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  background-color: var(--background-color);\n}\n\ncanvas {\n  margin: auto;\n  margin-top: 1em;\n}\n\n.score {\n  width: 80%;\n  \n  display:  flex;\n  justify-content: space-around;\n\n  &__container {\n    text-align: center;\n  }\n\n  &__display {\n    font-size: 1.6em;\n    margin: .5em 0;\n  }\n}\n\n.info {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  padding: 3rem;\n  text-align: center;\n\n  &.inactive {\n    display: none;\n    pointer-events: none;\n  }\n}\n\n#start-button {\n  z-index: 100;\n}"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=t(e);return e[2]?"@media ".concat(e[2]," {").concat(i,"}"):i})).join("")},e.i=function(t,i,n){"string"==typeof t&&(t=[[null,t,""]]);var o={};if(n)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var s=0;s<t.length;s++){var l=[].concat(t[s]);n&&o[l[0]]||(i&&(l[2]?l[2]="".concat(i," and ").concat(l[2]):l[2]=i),e.push(l))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,n=new Array(e);i<e;i++)n[i]=t[i];return n}t.exports=function(t){var i,n,o=(n=4,function(t){if(Array.isArray(t))return t}(i=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var i=[],n=!0,o=!1,r=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(i.push(a.value),!e||i.length!==e);n=!0);}catch(t){o=!0,r=t}finally{try{n||null==s.return||s.return()}finally{if(o)throw r}}return i}}(i,n)||function(t,i){if(t){if("string"==typeof t)return e(t,i);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?e(t,i):void 0}}(i,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],a=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(l," */"),h=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[r].concat(h).concat([c]).join("\n")}return[r].join("\n")}},379:(t,e,i)=>{var n,o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),r=[];function a(t){for(var e=-1,i=0;i<r.length;i++)if(r[i].identifier===t){e=i;break}return e}function s(t,e){for(var i={},n=[],o=0;o<t.length;o++){var s=t[o],l=e.base?s[0]+e.base:s[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var d=a(h),A={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(r[d].references++,r[d].updater(A)):r.push({identifier:h,updater:v(A,e),references:1}),n.push(h)}return n}function l(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var r=i.nc;r&&(n.nonce=r)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var a=o(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function d(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var r=document.createTextNode(o),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(r,a[e]):t.appendChild(r)}}function A(t,e,i){var n=i.css,o=i.media,r=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var u=null,p=0;function v(t,e){var i,n,o;if(e.singleton){var r=p++;i=u||(u=l(e)),n=d.bind(null,i,r,!1),o=d.bind(null,i,r,!0)}else i=l(e),n=A.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=a(i[n]);r[o].references--}for(var l=s(t,e),c=0;c<i.length;c++){var h=a(i[c]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}i=l}}}},446:(t,e,i)=>{t.exports=i.p+"1552b8429ae0697514f9.wav"},224:(t,e,i)=>{t.exports=i.p+"537cda06908aa5abb9e1.wav"},941:(t,e,i)=>{t.exports=i.p+"d424ac67e758d6b6e14f.wav"},944:(t,e,i)=>{t.exports=i.p+"9b5726c045a253863640.png"}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={id:n,exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;i.g.importScripts&&(t=i.g.location+"");var e=i.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=t})(),(()=>{var t=i(379),e=i.n(t),n=i(950);e()(n.Z,{insert:"head",singleton:!1}),n.Z.locals;const o=.8*window.innerWidth,r=.5*o;var a,s,l;!function(t){t[t.WALL=0]="WALL",t[t.RACKET=1]="RACKET"}(a||(a={})),function(t){t[t.UP=1]="UP",t[t.DOWN=-1]="DOWN"}(s||(s={})),function(t){t[t.PLAYER=0]="PLAYER",t[t.COMPUTER=1]="COMPUTER",t[t.NONE=2]="NONE"}(l||(l={}));class c{constructor(t,e,i,n,o,r){this.x=t,this.y=e,this.deltaY=i,this.deltaX=n,this.size=o,this.velocity=r,this.angle=0}move(){let t=this.velocity/Math.sqrt(this.deltaX*this.deltaX+this.deltaY*this.deltaY);this.x+=this.deltaX*t,this.y+=this.deltaY*t}changeDuration(t,e){this.deltaY=e,this.deltaX=t}increaseVelocity(){this.velocity<=20&&(this.velocity++,this.angle++)}resetVelocity(t){this.velocity=t}resetBallPosition(t,e){this.x=t,this.y=e}render(t){const e=new Image;e.src=i(944),t.save(),t.translate(this.x,this.y),t.rotate(.2*this.angle),t.translate(-this.x,-this.y),t.drawImage(e,this.x-this.size,this.y-this.size,2*this.size,2*this.size),t.restore(),this.angle++}}class h{constructor(t,e,i,n,o){this.x=t,this.y=e,this.name=i,this.size=n,this.width=o,this.score=0,this.isMoving=!1,this.velocity=3}move(t,e){this.setVelocity(e),this.y+=t*this.velocity*1.5,this.isMoving=!0}setMoveStop(){this.isMoving=!this.isMoving}getIsMoving(){return this.isMoving}increaseScore(){this.score+=1}getScore(){return this.score}moveComputer(t,e,i){this.setVelocity(i),this.y+this.size/2<e&&this.y+this.size<t?this.y+=this.velocity:this.y+this.size/2>e&&this.y>0&&(this.y-=this.velocity),this.isMoving=!1}setVelocity(t){let e=Math.floor(Math.abs(t));e<1?this.velocity=3:e<=2?this.velocity=6:e>2&&(this.velocity=9)}render(t,e,i){const n=new Path2D;n.rect(this.x-5,this.y,this.width+10,this.size),t.fillStyle=i,t.fill(n);const o=new Path2D;o.rect(this.x,this.y-5,this.width,this.size+10),t.fillStyle=i,t.fill(o);const r=new Path2D;r.rect(this.x,this.y,this.width,this.size),t.fillStyle=e,t.fill(r)}}const d=(t,e,i,n)=>{t.lineWidth=5,t.beginPath(),t.setLineDash(n),t.moveTo(e,0),t.lineTo(e,i),t.strokeStyle="rgb(216, 216, 216)",t.stroke()};class A{constructor(t,e,i,n,o,r,s){this.width=t,this.height=e,this.ballSize=i,this.racketSize=n,this.racketOffset=o,this.racketWeight=r,this.initialVelocity=s,this.isGameOver=!1,this.initialDeltas=[1,-1],this.winner=l.NONE,this.setEventForMove=t=>{"ArrowDown"===t.key?this.player.y+this.racketSize<this.height&&this.player.move(1,this.ball.deltaY):"ArrowUp"===t.key&&this.player.y>0&&this.player.move(-1,this.ball.deltaY)},this.setEventForMoveStop=t=>{"ArrowDown"===t.key?this.player.y+this.racketSize<this.height&&this.player.setMoveStop():"ArrowUp"===t.key&&this.player.y>0&&this.player.setMoveStop()},this.findIsCorner=t=>Math.abs(this.ball.y+this.ballSize-t.y)<=20?1:Math.abs(this.ball.y-this.ballSize-(this.player.y+this.racketSize))<=20?-1:0,this.makeMove=(t,e)=>this.ball.y+this.ballSize>=t.y&&this.ball.y-this.ballSize<=t.y+this.racketSize?(-1===this.findIsCorner(t)?this.bounceCorner(-1):1===this.findIsCorner(t)?this.bounceCorner(1):this.bounce(t,a.RACKET),this.ball.increaseVelocity(),!0):(e.increaseScore(),this.checkForGameOver(e)?(this.setGameOver(),this.setWinner(e),!1):(this.startNewRound(),!1)),this.drawCourt=t=>{t.fillStyle="rgb(60, 68, 64)",t.fillRect(0,0,this.width,this.height),d(t,this.width/2,this.height,[]),d(t,this.racketOffset+this.racketWeight-1,this.height,[20,15]),d(t,this.width-this.racketOffset+1,this.height,[20,15])},this.ball=new c(this.width/2,this.height/2,this.initialDeltas[0],this.initialDeltas[1],this.ballSize,this.initialVelocity),this.player=new h(this.racketOffset,this.height/2-this.racketSize/2,l.PLAYER,this.racketSize,this.racketWeight),this.computer=new h(this.width-this.racketOffset,this.height/2-this.racketSize/2,l.COMPUTER,this.racketSize,this.racketWeight)}checkForBallMoves(){return this.ball.y-this.ballSize<0||this.ball.y+this.ballSize>=this.height?(this.bounce(null,a.WALL),!0):this.ball.x+this.ballSize>=this.computer.x&&this.ball.deltaX>0?this.makeMove(this.computer,this.player):this.ball.x-this.ballSize<=this.player.x+this.racketWeight&&this.ball.deltaX<0&&this.makeMove(this.player,this.computer)}getGameOver(){return this.isGameOver}getComputerScore(){return this.computer.getScore().toString()}getPlayerScore(){return this.player.getScore().toString()}getWinner(){return this.winner}runComputerMove(){this.ball.x>this.width/2&&this.ball.deltaX>0&&this.computer.moveComputer(this.height,this.ball.y,this.ball.deltaY)}bounceCorner(t){return t===Math.sign(this.ball.deltaY)?(this.ball.deltaX=-this.ball.deltaX,void(this.ball.deltaY=.4*this.ball.deltaY)):(this.ball.deltaX=-this.ball.deltaX,void(this.ball.deltaY=2*this.ball.deltaY))}bounce(t,e){if(e!==a.WALL||null!==t){if(e===a.RACKET&&null!==t)return t.getIsMoving()?(this.ball.deltaX=-this.ball.deltaX,void(this.ball.deltaY=1.5*this.ball.deltaY)):(this.ball.deltaX=-this.ball.deltaX,void(this.ball.deltaY=Math.sign(this.ball.deltaY)));throw new Error("Wrong obstacle type")}this.ball.deltaY=-this.ball.deltaY}checkForGameOver(t){return 21===t.getScore()}setGameOver(){this.isGameOver=!0}setWinner(t){this.winner=t.name}startNewRound(){this.ball.resetBallPosition(this.width/2,this.height/2),this.ball.resetVelocity(this.initialVelocity),this.ball.deltaX=-this.ball.deltaX,this.ball.deltaY=Math.sign(this.ball.deltaY)}render(t){this.drawCourt(t),this.ball.move(),this.player.render(t,"rgb(71, 33, 30)","rgb(85, 43, 40)"),this.computer.render(t,"rgb(26, 49, 75)"," rgb(37, 61, 88)"),this.ball.render(t)}}const u=document.getElementById("start-button"),p=document.getElementById("info");let v=!1;function b(){const[t,e,n]=(()=>{const t=document.createElement("div");t.classList.add("score");const e=document.createElement("div");e.classList.add("score__container");const i=document.createElement("p");i.classList.add("score__name"),i.textContent="Your score";const n=document.createElement("p");n.classList.add("score__display"),e.appendChild(i),e.appendChild(n);const o=document.createElement("div");o.classList.add("score__container");const r=document.createElement("p");r.classList.add("score__name"),r.textContent="Computer score";const a=document.createElement("p");return a.classList.add("score__display"),o.appendChild(r),o.appendChild(a),t.appendChild(e),t.appendChild(o),document.body.appendChild(t),[t,n,a]})(),a=((t,e)=>{const i=document.createElement("canvas");return i.width=t,i.height=e,document.body.appendChild(i),i})(o,r),s=a.getContext("2d");if(s&&t){const c=new A(o,r,20,180,80,20,8);e.textContent=c.getPlayerScore(),n.textContent=c.getComputerScore(),document.addEventListener("keydown",(t=>c.setEventForMove(t))),document.addEventListener("keyup",(t=>c.setEventForMoveStop(t)));const h=new Audio(i(224)),d=new Audio(i(941)),f=new Audio(i(446)),g=()=>{c.render(s),c.runComputerMove(),c.checkForBallMoves()&&h.play(),e.textContent=c.getPlayerScore(),n.textContent=c.getComputerScore(),c.getGameOver()?c.getGameOver()&&(v=!1,null!==u&&null!==p&&(function(t,e,i,n,o,r){t.classList.toggle("inactive");const a=t.querySelector("h1"),s=t.querySelector("h2");null!==a&&null!==s&&(o===l.PLAYER?(a.textContent="Congratulations!",s.textContent="Do you want to play again?",e.textContent="Play again"):(a.textContent="Game over",s.textContent="Do you want to try again?",e.textContent="Retry")),e.addEventListener("click",(function o(){t.classList.toggle("inactive"),r(),i.remove(),n.remove(),e.removeEventListener("click",o)}))}(p,u,a,t,c.getWinner(),b),c.getWinner()===l.PLAYER?f.play():d.play())):requestAnimationFrame(g)};g()}}null!==u&&null!==p&&u.addEventListener("click",(function t(){null!==p&&null!==u&&(p.classList.add("inactive"),v||(b(),u.removeEventListener("click",t)),v=!0)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,